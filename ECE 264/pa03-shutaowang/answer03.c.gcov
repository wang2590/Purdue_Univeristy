        -:    0:Source:answer03.c
        -:    0:Graph:answer03.gcno
        -:    0:Data:answer03.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "pa03.h"
        2:    2:double integrate1(Range rng)
        -:    3:{
        -:    4:
        2:    5:	double deltaX = (rng.upperlimit - rng.lowerlimit) / rng.intervals;
        2:    6:	double height = 0;
        2:    7:	double sumIntegral = 0;
    20002:    8:	for(int i = 0;i < rng.intervals;i++)
        -:    9:	{
    20000:   10:		double width =(deltaX * i + rng.lowerlimit ); 
    20000:   11:		height = func(width);
    20000:   12:		sumIntegral += height * deltaX;
        -:   13:	} 
        2:   14:	return sumIntegral;
        -:   15:	//Perform numerical integration of the function func(x)
        -:   16:	//INPUT: Range rng -- the lower and upper limits of the integration
        -:   17:	//                    and the number of intervals to integrate over
        -:   18:	//OUTPUT: Return the result of the integration
        -:   19:
        -:   20:}
        -:   21:
        1:   22:void integrate2(RangeAnswer * rngans)
        -:   23:{
        1:   24:	rngans -> answer = integrate1(rngans -> rng);
        -:   25:
        -:   26:	//Perform numerical integration of the function func(x)
        -:   27:	//INPUT: RangeAnswer * rngans 
        -:   28:	//              -- the lower and upper limits of the integration
        -:   29:	//                 and the number of intervals to integrate over
        -:   30:	//OUTPUT: The result of the integration should be placed in rngans->answer
        -:   31:
        -:   32:	//You should try to call integrate1 when implementing integrate2
        1:   33:}
